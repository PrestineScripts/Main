local PrestineLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/PrestineScripts/PrestineLibrary/refs/heads/main/PrestineLib"))()

local PrestineGUI = PrestineLib:CreateGUI({
    Title = "Prestine Hub | [Dead Rails]",
    SubTitle = "Made By R3LIG",
    CurrentVersion = "Version 1",
    Theme = "Dark"
})

local player = game.Players.LocalPlayer
local backpack = player.Backpack
local character = player.Character
local Hum = character.Humanoid
local HRP = character:WaitForChild("HumanoidRootPart")

function TravelToTarget(target)
    local HRP = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    local Character = HRP.Parent
    local Humanoid = Character:WaitForChild("Humanoid")
    local TweenService = game:GetService("TweenService")
    local PathfindingService = game:GetService("PathfindingService")

    local teleportDelay = _G.teleportDelay or 1
    local targetCFrame
    local isInstance = typeof(target) == "Instance" and target:IsA("BasePart")

    if isInstance then
        targetCFrame = target.CFrame
    elseif typeof(target) == "CFrame" then
        targetCFrame = target
    elseif typeof(target) == "Vector3" then
        targetCFrame = CFrame.new(target)
    else
        warn("Invalid target type:", typeof(target))
        return
    end

    local targetPosition = targetCFrame.Position

    if _G.travelMethod == "Teleport" then
        HRP.CFrame = targetCFrame
        wait(teleportDelay)

    elseif _G.travelMethod == "Tween" then
        local distance = (HRP.Position - targetPosition).Magnitude
        local duration = distance / (_G.tweenSpeed or 150)

        local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local goal = { CFrame = targetCFrame }
        local tween = TweenService:Create(HRP, tweenInfo, goal)
        tween:Play()

        tween.Completed:Wait()

    elseif _G.travelMethod == "Teleport2" then
        if isInstance then
            HRP.CFrame = targetCFrame

            local weld = Instance.new("Weld")
            weld.Part0 = target
            weld.Part1 = HRP
            weld.C0 = CFrame.new()
            weld.Parent = target

            wait(teleportDelay)

            weld:Destroy()
        else
            local tempPart = Instance.new("Part")
            tempPart.Size = Vector3.new(0.5, 0.5, 0.5)
            tempPart.Transparency = 1
            tempPart.Anchored = true
            tempPart.CanCollide = false
            tempPart.CFrame = targetCFrame
            tempPart.Name = "TemporaryTeleportPart"
            tempPart.Parent = workspace

            HRP.CFrame = tempPart.CFrame

            local weld = Instance.new("Weld")
            weld.Part0 = tempPart
            weld.Part1 = HRP
            weld.C0 = CFrame.new()
            weld.Parent = tempPart

            wait(teleportDelay)

            tempPart:Destroy()
        end

    elseif _G.travelMethod == "TweenXTeleport" then
        local liftHeight = 25
        local tweenSpeed = 20

        local currentPosition = HRP.Position
        local targetPosition = targetCFrame.Position
        local distanceToTarget = (currentPosition - targetPosition).Magnitude
        local currentY = currentPosition.Y
        local targetY = targetPosition.Y

        if distanceToTarget > 200 then
            local yDifference = currentY - targetY
            if yDifference < liftHeight then
                local desiredY = targetY + liftHeight
                local upCFrame = CFrame.new(Vector3.new(currentPosition.X, desiredY, currentPosition.Z), targetPosition)
                local upDistance = math.abs(desiredY - currentY)
                local upDuration = upDistance / tweenSpeed

                local upTweenInfo = TweenInfo.new(upDuration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                local upTween = TweenService:Create(HRP, upTweenInfo, { CFrame = upCFrame })
                upTween:Play()
                upTween.Completed:Wait()
            end
        end

        local horizontalTarget = Vector3.new(targetPosition.X, HRP.Position.Y, targetPosition.Z)
        local horizontalCFrame = CFrame.new(horizontalTarget, targetPosition)
        local horizontalDistance = (HRP.Position - horizontalTarget).Magnitude
        local horizontalDuration = horizontalDistance / tweenSpeed

        local horizontalTweenInfo = TweenInfo.new(horizontalDuration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local horizontalTween = TweenService:Create(HRP, horizontalTweenInfo, { CFrame = horizontalCFrame })
        horizontalTween:Play()
        horizontalTween.Completed:Wait()
        task.wait(0.5)

        HRP.CFrame = targetCFrame

        wait(teleportDelay)

    elseif _G.travelMethod == "Walking" then
        local path = PathfindingService:CreatePath({
            AgentRadius = 2,
            AgentHeight = 5,
            AgentCanJump = true,
            AgentCanClimb = true,
        })

        path:ComputeAsync(HRP.Position, targetPosition)

        if path.Status == Enum.PathStatus.Success then
            local waypoints = path:GetWaypoints()
            for _, waypoint in ipairs(waypoints) do
                Humanoid:MoveTo(waypoint.Position)
                Humanoid.MoveToFinished:Wait()
            end
        else
            warn("Pathfinding failed:", path.Status)
        end
    end
end

function collectMoney()
    while _G.autoCollectMoney do
        for _, money in pairs(workspace.RuntimeItems:GetChildren()) do
            if money and string.find(money.Name, "Money") and money:FindFirstChild("MoneyBag") then
                local moneyPrompt = money.MoneyBag:FindFirstChildOfClass("ProximityPrompt")
                if moneyPrompt then
                    moneyPrompt.HoldDuration = 0
                    fireproximityprompt(moneyPrompt)
                end
            end
        end
        task.wait()
    end
end

function dumpSack()
    for _, sack in pairs(backpack:GetChildren()) do
        if sack and string.find(sack.Name, "Sack") then
            sack.Parent = character
            task.wait()
            for i = 1, 30 do
                game:GetService("ReplicatedStorage").Remotes.DropItem:FireServer()
            end
            task.wait(0.5)
            sack.Parent = backpack
        end
    end
end

function driveTrain()
    local trainSeat = workspace.Train.TrainControls.ConductorSeat.VehicleSeat

    while _G.autoDriveTrain do
        if trainSeat then
            trainSeat.ThrottleFloat = 1
            trainSeat.SteerFloat = 0
        end
        task.wait()
    end

    if trainSeat then
        trainSeat.ThrottleFloat = 0
        trainSeat.SteerFloat = 0
    end
end

function storeItem()
    while _G.autoStoreItem do
        for _, item in pairs(workspace.RuntimeItems:GetChildren()) do
            if item then
                for _, keyword in ipairs(_G.itemToStore) do
                    if string.find(item.Name, keyword) then
                        for _, itempart in ipairs(item:GetChildren()) do
                            if itempart:IsA("BasePart") and HRP then
                                local distance = (HRP.Position - itempart.Position).Magnitude
                                if distance <= 15 then
                                    local sackTool = backpack:FindFirstChild("Sack")
                                    if sackTool then
                                        sackTool.Parent = character
                                    end
                                    game:GetService("ReplicatedStorage").Remotes.StoreItem:FireServer(item)
                                end
                                break
                            end
                        end
                    end
                end
            end
        end
        task.wait()
    end
end

function addItemESP()
    while _G.espItem do
        for _, item in pairs(workspace.RuntimeItems:GetChildren()) do
            if item and not item:FindFirstChild("ESPHighlight") then
                for _, keyword in ipairs(_G.itemToESP) do
                    if string.find(item.Name, keyword) then
                        local highlight = Instance.new("Highlight")
                        highlight.Name = "ESPHighlight"
                        highlight.FillColor = Color3.fromRGB(255, 255, 0)
                        highlight.OutlineColor = Color3.fromRGB(0, 0, 0)
                        highlight.OutlineTransparency = 0
                        highlight.FillTransparency = 0.25
                        highlight.Adornee = item
                        highlight.Parent = item

                        local gui = Instance.new("BillboardGui")
                        gui.Name = "ESPBillboard"
                        gui.Size = UDim2.new(0, 100, 0, 30)
                        gui.StudsOffset = Vector3.new(0, 2, 0)
                        gui.AlwaysOnTop = true
                        gui.Parent = item

                        local adorneePart
                        for _, child in ipairs(item:GetChildren()) do
                            if child:IsA("BasePart") then
                                adorneePart = child
                                break
                            end
                        end

                        if adorneePart then
                            gui.Adornee = adorneePart
                        end

                        local label = Instance.new("TextLabel")
                        label.Size = UDim2.new(1, 0, 1, 0)
                        label.BackgroundTransparency = 1
                        label.TextColor3 = Color3.fromRGB(255, 255, 255)
                        label.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
                        label.TextStrokeTransparency = 0
                        label.TextScaled = true
                        label.Font = Enum.Font.SourceSansBold
                        label.Text = item.Name
                        label.Parent = gui

                        break
                    end
                end
            end
        end
        task.wait()
    end

    for _, item in pairs(workspace.RuntimeItems:GetChildren()) do
        local esp = item:FindFirstChild("ESPHighlight")
        if esp then esp:Destroy() end
        local gui = item:FindFirstChild("ESPBillboard")
        if gui then gui:Destroy() end
    end
end

function pickupTool()
    while _G.autoPickTool do
        for _, tool in pairs(workspace.RuntimeItems:GetChildren()) do
            if tool then
                for _, keyword in ipairs(_G.toolToPick) do
                    if string.find(tool.Name, keyword) then
                        for _, toolPart in ipairs(tool:GetChildren()) do
                            if toolPart:IsA("BasePart") and HRP then
                                local distance = (HRP.Position - toolPart.Position).Magnitude
                                if distance <= 15 then
                                   game:GetService("ReplicatedStorage").Remotes.Tool.PickUpTool:FireServer(tool)
                                end
                                break
                            end
                        end
                    end
                end
            end
        end
        task.wait(1)
    end
end

function useAmmo()
    while _G.autoUseAmmo do
        for _, ammo in pairs(workspace.RuntimeItems:GetChildren()) do
            if ammo then
                for _, keyword in ipairs(_G.ammoToUse) do
                    if string.find(ammo.Name, keyword) then
                        for _, ammoPart in ipairs(ammo:GetChildren()) do
                            if ammoPart:IsA("BasePart") and HRP then
                                local distance = (HRP.Position - ammoPart.Position).Magnitude
                                if distance <= 15 then
                                    game:GetService("ReplicatedStorage").Packages.RemotePromise.Remotes.C_ActivateObject:FireServer(ammo)
                                end
                                break
                            end
                        end
                    end
                end
            end
        end
        task.wait()
    end
end

local Players = game:GetService("Players")
local originalSizes = {}

function expandHitbox()
    while _G.increaseHitbox do
        for _, enemy in pairs(game.Workspace:GetDescendants()) do
            if enemy:IsA("Model") and enemy:FindFirstChild("Humanoid") and enemy:FindFirstChild("HumanoidRootPart") then
                if not Players:GetPlayerFromCharacter(enemy) then
                    local humanoid = enemy:FindFirstChild("Humanoid")
                    local hrp = enemy:FindFirstChild("HumanoidRootPart")

                    if humanoid.Health > 0 then
                        if not originalSizes[enemy] then
                            originalSizes[enemy] = hrp.Size
                            hrp.Size = hrp.Size * 5
                            hrp.Transparency = 0.5
                        end

                        humanoid.Died:Connect(function()
                            if enemy and enemy.Parent and hrp and originalSizes[enemy] then
                                hrp.Size = originalSizes[enemy]
                                originalSizes[enemy] = nil
                            end
                        end)
                    end
                end
            end
        end
        task.wait(1)
    end
end

function useBandage()
    while _G.autoUseBandage do
        if Hum.Health <= _G.healthToBandage then
            local bandage = backpack:FindFirstChild("Bandage")
            if bandage and bandage:FindFirstChild("Use") then
                bandage.Use:FireServer()
            end
        end
        task.wait(1)
    end
end

function useSnakeoil()
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    while _G.autoUseSnake do
        if humanoid.Health <= _G.healthToSnake then
            local snakeOilB = backpack:FindFirstChild("Snake Oil")
            if snakeOilB then
                snakeOilB.Parent = character
            end
            task.wait()
            local snakeOilC = character:FindFirstChild("Snake Oil")
            if snakeOilC then
                snakeOilC:Activate()
            end
        end
        task.wait(1)
    end
end

local Tabs = {
    {Name = "Home", Icon = "rbxassetid://85741999712008"},
    {Name = "Main", Icon = "rbxassetid://100761321353155"},
    {Name = "Item", Icon = "rbxassetid://138093240422519"},
    {Name = "Combat", Icon = "rbxassetid://115463986959401"},
    {Name = "Ambient", Icon = "rbxassetid://91430860482621"},
    {Name = "Settings", Icon = "rbxassetid://75905086339374"}
}

PrestineLib:CreateTab(Tabs)

PrestineLib:AddNotification({TitleText="Prestine", ContentText="Welcome To Prestine Hub!", Duration=5})

PrestineLib:AddSection({Tab = "Home", MainTitle = "Home"})

PrestineLib:AddButton({
    Tab = "Home",
    MainName = "Discord Link!",
    Callback = function()
        setclipboard("https://discord.gg/u2J38UJSBk")
        PrestineLib:AddNotification({TitleText="Prestine", ContentText="Succesfully Copied Discord Link!", Duration=3})
    end
})

PrestineLib:AddButton({
    Tab = "Home",
    MainName = "Youtube Link!",
    Callback = function()
        setclipboard("https://www.youtube.com/@PrestineScripts")
        PrestineLib:AddNotification({TitleText="Prestine", ContentText="Succesfully Copied Youtube Link!", Duration=3})
    end
})

PrestineLib:AddSection({Tab = "Home", MainTitle = "Status"})

local statusParagraph = PrestineLib:AddParagraph({
    Tab = "Home",
    MainTitle = "Status",
    paragraphSize = 70,
    MainContent = ""
})

---------

PrestineLib:AddSection({Tab = "Main", MainTitle = "Game Status"})

local gameStatusParagraph = PrestineLib:AddParagraph({
    Tab = "Main",
    MainTitle = "Status",
    paragraphSize = 70,
    MainContent = ""
})

PrestineLib:AddSection({Tab = "Main", MainTitle = "Game"})

PrestineLib:AddToggle({
    Tab = "Main",
    MainName = "Auto Collect Money",
    DefaultState = false,
    Callback = function(Value)
        _G.autoCollectMoney = Value
        if Value then
           collectMoney()
        end
    end
})

PrestineLib:AddButton({
    Tab = "Main",
    MainName = "Dump Sack",
    Callback = function()
       dumpSack()
    end
})

PrestineLib:AddSection({Tab = "Main", MainTitle = "Train"})

PrestineLib:AddButton({
    Tab = "Main",
    MainName = "Teleport To Train",
    Callback = function()
       if HRP then
          TravelToTarget(workspace.Train.TrainControls.ConductorSeat.VehicleSeat.Position)
       end
    end
})

PrestineLib:AddToggle({
    Tab = "Main",
    MainName = "Auto Drive Train",
    DefaultState = false,
    Callback = function(Value)
        _G.autoDriveTrain = Value
        if Value then
           driveTrain()
        end
    end
})

PrestineLib:AddSection({Tab = "Main", MainTitle = "Character"})

PrestineLib:AddToggle({
    Tab = "Main",
    MainName = "Boost Walkspeed",
    DefaultState = false,
    Callback = function(Value)
        if Value then
            Hum.WalkSpeed = 18
		else
			Hum.WalkSpeed = 16
        end
    end
})

PrestineLib:AddToggle({
    Tab = "Main",
    MainName = "Boost Jump Height",
    DefaultState = false,
    Callback = function(Value)
        if Value then
            Hum.JumpHeight = 12
		else
			Hum.JumpHeight = 7.2
        end
    end
})

PrestineLib:AddToggle({
    Tab = "Main",
    MainName = "Anchor Body",
    DefaultState = false,
    Callback = function(Value)
        if Value then
            HRP.Anchored = true
		else
			HRP.Anchored = false
        end
    end
})

PrestineLib:AddSection({Tab = "Main", MainTitle = "POV & Cursor"})

PrestineLib:AddToggle({
    Tab = "Main",
    MainName = "Unlock Third Person",
    DefaultState = true,
    Callback = function(Value)
        if Value then
            game.Players.LocalPlayer.CameraMode = Enum.CameraMode.Classic
        else
            game.Players.LocalPlayer.CameraMode = Enum.CameraMode.LockFirstPerson
        end
    end
})

PrestineLib:AddToggle({
    Tab = "Main",
    MainName = "Unlock Cursor",
    DefaultState = true,
    Callback = function(Value)
        if Value then
	    game:GetService("UserInputService").MouseBehavior = Enum.MouseBehavior.Default
        else
            game:GetService("UserInputService").MouseBehavior = Enum.MouseBehavior.LockCenter
        end
    end
})

PrestineLib:AddSection({Tab = "Item", MainTitle = "Auto Store"})

local itemList = { "Chestplate", "Helmet", "Shoulder", "Banjo", "Brain", "Gold", "Silver", "Statue", "Painting", "Barrel", "Book", "Chair", "Newspaper", "Rock", "Rope", "Teapot", "Tumbleweed", "Vase", "Wheel", "Machine", "Bandage", "Wire", "Camera", "Horse", "Lantern", "Lightning", "Mining", "Sheet", "Snake", "Saddle", "Torch", "Coal", "Wanted", "Bank", "Jade", "Key", "Werewolf", "Money", "Bond", "Mac", "Runner", "Banker", "Ironclad", "Dynamite Zombie", "Sheriff", "Soldier", "Captain", "Scientist", "Outlaw", "Vampire", "Skeleton", "Mask" }

local itemChoiceList = {}

for _, item in pairs(itemList) do
    table.insert(itemChoiceList, item)
end

PrestineLib:AddDropdown({
    Tab = "Item",
    MainTitle = "Select Item To Store",
    ChoiceList = itemChoiceList,
    Multiple = true,
    DefaultChoice = {"No Selected"},
    Callback = function(Value)
        _G.itemToStore = Value
    end
})

PrestineLib:AddToggle({
    Tab = "Item",
    MainName = "Auto Store Item (Selected)",
    DefaultState = false,
    Callback = function(Value)
        _G.autoStoreItem = Value
        if Value then
	       storeItem()
        end
    end
})

PrestineLib:AddSection({Tab = "Item", MainTitle = "Esp Item"})

PrestineLib:AddDropdown({
    Tab = "Item",
    MainTitle = "Select Item For Esp",
    ChoiceList = itemChoiceList,
    Multiple = true,
    DefaultChoice = {"No Selected"},
    Callback = function(Value)
        _G.itemToESP = Value
    end
})

PrestineLib:AddToggle({
    Tab = "Item",
    MainName = "Esp Item (Selected)",
    DefaultState = false,
    Callback = function(Value)
        _G.espItem = Value
        if Value then
	       addItemESP()
        end
    end
})

PrestineLib:AddSection({Tab = "Item", MainTitle = "Pickup Tool"})

local toolPList = { "Rifle", "Revolver", "Shotgun", "Snake", "Bandage", "Holy" }

local toolPChoiceList = {}

for _, toolP in pairs(toolPList) do
    table.insert(toolPChoiceList, toolP)
end

PrestineLib:AddDropdown({
    Tab = "Item",
    MainTitle = "Select Tool To Pick",
    ChoiceList = toolPChoiceList,
    Multiple = true,
    DefaultChoice = {"No Selected"},
    Callback = function(Value)
        _G.toolToPick = Value
    end
})

PrestineLib:AddToggle({
    Tab = "Item",
    MainName = "Auto Pickup Tool (Selected)",
    DefaultState = false,
    Callback = function(Value)
        _G.autoPickTool = Value
        if Value then
	       pickupTool()
        end
    end
})

PrestineLib:AddSection({Tab = "Item", MainTitle = "Auto Use Ammo"})

local ammoList = { "Rifle", "Revolver", "Shotgun" }

local ammoChoiceList = {}

for _, ammo in pairs(ammoList) do
    table.insert(ammoChoiceList, ammo)
end

PrestineLib:AddDropdown({
    Tab = "Item",
    MainTitle = "Select Ammo To Use",
    ChoiceList = ammoChoiceList,
    Multiple = true,
    DefaultChoice = {"No Selected"},
    Callback = function(Value)
        _G.ammoToUse = Value
    end
})

PrestineLib:AddToggle({
    Tab = "Item",
    MainName = "Auto Use Ammo (Selected)",
    DefaultState = false,
    Callback = function(Value)
        _G.autoUseAmmo = Value
        if Value then
	       useAmmo()
        end
    end
})

PrestineLib:AddSection({Tab = "Combat", MainTitle = "Combat"})

PrestineLib:AddToggle({
    Tab = "Combat",
    MainName = "Increase Enemy Hitbox",
    DefaultState = false,
    Callback = function(Value)
        _G.increaseHitbox = Value
        if Value then
	       expandHitbox()
        end
    end
})

PrestineLib:AddSection({Tab = "Combat", MainTitle = "Emergency Use"})

PrestineLib:AddSlider({
    Tab = "Combat",
    SliderTitle = "Health To Use Bandage :",
    Min = 0,
    Max = 100,
    DefaultValue = 50,
    Increment = 5,
    Callback = function(Value)
        _G.healthToBandage = Value
    end
})

PrestineLib:AddToggle({
    Tab = "Combat",
    MainName = "Auto Use Bandage",
    DefaultState = false,
    Callback = function(Value)
        _G.autoUseBandage = Value
        if Value then
	       useBandage()
        end
    end
})

PrestineLib:AddSlider({
    Tab = "Combat",
    SliderTitle = "Health To Use Snake Oil :",
    Min = 0,
    Max = 100,
    DefaultValue = 50,
    Increment = 5,
    Callback = function(Value)
        _G.healthToSnake = Value
    end
})

PrestineLib:AddToggle({
    Tab = "Combat",
    MainName = "Auto Use Snake Oil",
    DefaultState = false,
    Callback = function(Value)
        _G.autoUseSnake = Value
        if Value then
	       useSnakeoil()
        end
    end
})

PrestineLib:AddSection({Tab = "Ambient", MainTitle = "Environment"})

PrestineLib:AddToggle({
    Tab = "Ambient",
    MainName = "Remove Darkness",
    DefaultState = false,
    Callback = function(Value)
        local lighting = game:GetService("Lighting")
 
        if Value then
             originalSettings = {
                Brightness = lighting.Brightness,
                GlobalShadows = lighting.GlobalShadows,
                FogEnd = lighting.FogEnd,
                FogStart = lighting.FogStart,
                 Ambient = lighting.Ambient,
                OutdoorAmbient = lighting.OutdoorAmbient,
                ShadowSoftness = lighting.ShadowSoftness,
                ClockTime = lighting.ClockTime
            }
 
            lighting.Brightness = 2
             lighting.GlobalShadows = false
            lighting.FogEnd = 10000
            lighting.FogStart = 0
            lighting.Ambient = Color3.fromRGB(128, 128, 128)
            lighting.OutdoorAmbient = Color3.fromRGB(150, 150, 150)
            lighting.ShadowSoftness = 0
            lighting.ClockTime = 12
 
             if lighting:FindFirstChild("Atmosphere") then
                lighting.Atmosphere:Destroy()
            end
 
            local sunRays = lighting:FindFirstChild("SunRays") or Instance.new("SunRaysEffect")
            sunRays.Intensity = 0.3
            sunRays.Spread = 0.7
            sunRays.Parent = lighting
 
             if lighting:FindFirstChild("ColorCorrection") then
                lighting.ColorCorrection:Destroy()
            end
 
        else
            if originalSettings then
                 lighting.Brightness = originalSettings.Brightness
                lighting.GlobalShadows = originalSettings.GlobalShadows
                lighting.FogEnd = originalSettings.FogEnd
                lighting.FogStart = originalSettings.FogStart
                lighting.Ambient = originalSettings.Ambient
                lighting.OutdoorAmbient = originalSettings.OutdoorAmbient
                 lighting.ShadowSoftness = originalSettings.ShadowSoftness
                lighting.ClockTime = originalSettings.ClockTime
            end
        end
    end
})

local Lighting = game:GetService("Lighting")

local DayOnlyLoop
local NightOnlyLoop

PrestineLib:AddToggle({
    Tab = "Ambient",
    MainName = "Day Cycle",
    DefaultState = false,
    Callback = function(Value)
        if DayOnlyLoop then
            DayOnlyLoop:Disconnect()
            DayOnlyLoop = nil
        end
        if NightOnlyLoop then
            NightOnlyLoop:Disconnect()
            NightOnlyLoop = nil
        end

        if Value then
            DayOnlyLoop = game:GetService("RunService").Heartbeat:Connect(function()
                Lighting.TimeOfDay = "12:00:00"
            end)
        else
            NightOnlyLoop = game:GetService("RunService").Heartbeat:Connect(function()
                Lighting.TimeOfDay = "22:00:00"
            end)
        end
    end
})

PrestineLib:AddToggle({
    Tab = "Ambient",
    MainName = "Remove Fog",
    DefaultState = false,
    Callback = function(Value)
        if Value then
            local sky = Lighting:FindFirstChild("GrayCloudSky")
            if sky then
                sky.Parent = Lighting.Bloom
            end
         else
            local skyInBloom = Lighting.Bloom:FindFirstChild("GrayCloudSky")
            if skyInBloom then
                skyInBloom.Parent = Lighting
            end
        end
    end
})

---------

PrestineLib:AddSection({Tab = "Settings", MainTitle = "Settings"})

PrestineLib:AddDropdown({
    Tab = "Settings",
    MainTitle = "Select Travel Method",
    ChoiceList = {"Teleport", "Tween", "Teleport2", "TweenXTeleport", "Walking"},
    Multiple = false,
    DefaultChoice = {"Teleport"},
    Callback = function(Value)
        _G.travelMethod = Value
    end
})

PrestineLib:AddSlider({
    Tab = "Settings",
    SliderTitle = "Tween Speed :",
    Min = 0,
    Max = 300,
    DefaultValue = 150,
    Increment = 10,
    Callback = function(Value)
        _G.tweenSpeed = Value
    end
})

PrestineLib:AddInput({
    Tab = "Settings",
    MainTitle = "Teleport Delay :",
    PlaceHolder = "Enter TP Delay (Number)",
    Callback = function(Value)
        _G.teleportDelay = Value
    end
})

game:GetService("RunService").Heartbeat:Connect(function()
    local currentPlayers = #game.Players:GetPlayers()
    statusParagraph:SetContent("Players : " .. currentPlayers .. "\nWalkspeed : " .. Hum.WalkSpeed .. "\nHealth : " .. Hum.Health .. "/" .. Hum.MaxHealth)

    local trainFuel = workspace.Train.Fuel.Value or "Nil"
    local traindDistance = workspace.Train.TrainControls.DistanceDial.SurfaceGui.TextLabel.Text or "Nil"
    local currentTime = game:GetService("ReplicatedStorage").TimeHour.Value
    gameStatusParagraph:SetContent("Train Fuel : " .. trainFuel .. "\nTrain Distance : " .. traindDistance .. "\nCurrent Time : " .. currentTime)
end)
